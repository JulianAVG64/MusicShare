# docker-compose.yml
# Version: 1.0
# Description: Orquestación completa de los servicios de MusicShare.

version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: musicshare_postgres
    environment:
      POSTGRES_USER: music_user
      POSTGRES_PASSWORD: music_pass
      POSTGRES_DB: music_db
    volumes:
      - musicshare_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U music_user -d music_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - musicshare_network

  mongodb:
    image: mongo:6
    container_name: musicshare_mongodb
    ports:
      - "27017:27017"
    volumes:
      - musicshare_mongo_data:/data/db
    networks:
      - musicshare_network

  musicservice:
    build:
      context: ./musicservice
      dockerfile: Dockerfile
    container_name: musicservice
    ports:
      - "8080:8080"
    networks:
      - musicshare_network

  userservice:
    build:
      context: ./userservice
      dockerfile: Dockerfile
    container_name: userservice
    depends_on:
      - postgres
      - mongodb
      - musicservice
    environment:
      POSTGRES_USER: music_user
      POSTGRES_PASSWORD: music_pass
      POSTGRES_DB: music_db
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      SECRET_KEY: "replace-this-secret"
      MUSICSERVICE_URL: "http://musicservice:8080"
    ports:
      - "8001:8001"
    volumes:
      - ./userservice/app:/app/app:ro
    networks:
      - musicshare_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: musicshare_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # Panel de administración opcional
    networks:
      - musicshare_network

  notificationservice:
    build:
      context: ./notificationservice
      dockerfile: Dockerfile
    container_name: notificationservice
    depends_on:
      - rabbitmq
    environment:
      AMQP_URL: "amqp://guest:guest@rabbitmq/"
      QUEUE_NAME: "notifications"
    ports:
      - "8082:8082"
    networks:
      - musicshare_network

  #frontend:
    # A la espera del frontend para descomentariar
    #image: frontend:latest
    #container_name: frontend
    #ports:
      #- "3000:3000"
    #networks:
      #- musicshare_network

volumes:
  musicshare_postgres_data:
  musicshare_mongo_data:

networks:
  musicshare_network:
    driver: bridge
