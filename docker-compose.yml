# docker-compose.yml
# Version: 1.0
# Description: Orquestación completa de los servicios de MusicShare.

version: '3.8'

services:
  # --- Base de Datos MongoDB ---
  mongodb:
    image: mongo:7.0
    container_name: musicshare-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: musicshare
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - musicshare-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # --- Music Service (Go) ---
  music-service:
    build:
      context: ./musicservice
      dockerfile: Dockerfile
    container_name: musicshare-music-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - SERVER_PORT=8081
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/musicshare?authSource=admin
      - MONGODB_DATABASE=musicshare
      - STORAGE_TYPE=local
      - STORAGE_PATH=/app/uploads
      - METADATA_SERVICE_GRPC=""
      - METADATA_SERVICE_HTTP=""
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - musicshare-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "--method=GET", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # --- Broker de Mensajes RabbitMQ ---
  rabbitmq:
    image: "rabbitmq:3.12-management"
    container_name: musicshare-rabbitmq
    hostname: "rabbitmq"
    restart: unless-stopped
    ports:
      - "5672:5672"   # Puerto para la comunicación AMQP
      - "15672:15672" # Puerto para la interfaz de gestión web
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"
    networks:
      - musicshare-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # --- Servicio de Notificaciones (Python) ---
  notification-service:
    build:
      context: ./notificationservice
      dockerfile: Dockerfile
    container_name: musicshare-notification-service
    restart: on-failure
    ports:
      - "8082:8082"
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq/
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - musicshare-network

# --- Redes y Volúmenes ---
networks:
  musicshare-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local

